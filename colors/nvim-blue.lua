vim.api.nvim_set_hl(0, 'DiagnosticDeprecated', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'SnacksPickerIconEnum', { bg = 'none', fg = 'none', link = "@lsp.type.enum" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconEnumMember', { bg = 'none', fg = 'none', link = "@lsp.type.enumMember" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconEvent', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconField', { bg = 'none', fg = 'none', link = "@variable.member" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconFile', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconFunction', { bg = 'none', fg = 'none', link = "@function" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconInterface', { bg = 'none', fg = 'none', link = "@lsp.type.interface" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconKey', { bg = 'none', fg = 'none', link = "@lsp.type.keyword" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconMethod', { bg = 'none', fg = 'none', link = "@function.method" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconModule', { bg = 'none', fg = 'none', link = "@module" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconNamespace', { bg = 'none', fg = 'none', link = "@module" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconNull', { bg = 'none', fg = 'none', link = "@constant.builtin" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconNumber', { bg = 'none', fg = 'none', link = "@number" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconObject', { bg = 'none', fg = 'none', link = "@constant" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconOperator', { bg = 'none', fg = 'none', link = "@operator" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconPackage', { bg = 'none', fg = 'none', link = "@module" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconProperty', { bg = 'none', fg = 'none', link = "@property" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconString', { bg = 'none', fg = 'none', link = "@string" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconStruct', { bg = 'none', fg = 'none', link = "@lsp.type.struct" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconTypeParameter', { bg = 'none', fg = 'none', link = "@lsp.type.typeParameter" })
vim.api.nvim_set_hl(0, 'SnacksPickerMatch', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerPrompt', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerInputSearch', { bg = 'none', fg = 'none', link = "@keyword" })
vim.api.nvim_set_hl(0, 'SnacksPickerTotals', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerLink', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, 'SnacksPickerLinkBroken', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'SnacksPickerPathIgnored', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerPathHidden', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerDir', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerBold', { bg = 'none', fg = 'none', link = "Bold" })
vim.api.nvim_set_hl(0, 'SnacksPickerDimmed', { bg = 'none', fg = 'none', link = "Conceal" })
vim.api.nvim_set_hl(0, 'SnacksPickerRow', { bg = 'none', fg = 'none', link = "String" })
vim.api.nvim_set_hl(0, 'SnacksPickerDirectory', { bg = 'none', fg = 'none', link = "Directory" })
vim.api.nvim_set_hl(0, 'SnacksPickerDesc', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, 'SnacksPickerDelim', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'SnacksPickerSpinner', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerSelected', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'SnacksPickerCmd', { bg = 'none', fg = 'none', link = "Function" })
vim.api.nvim_set_hl(0, 'SnacksPickerCmdBuiltin', { bg = 'none', fg = 'none', link = "@constructor" })
vim.api.nvim_set_hl(0, 'SnacksPickerUnselected', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerIdx', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'SnacksPickerItalic', { bg = 'none', fg = 'none', link = "Italic" })
vim.api.nvim_set_hl(0, 'SnacksPickerCode', { bg = 'none', fg = 'none', link = "@markup.raw.markdown_inline" })
vim.api.nvim_set_hl(0, 'SnacksPickerAuPattern', { bg = 'none', fg = 'none', link = "String" })
vim.api.nvim_set_hl(0, 'SnacksPickerAuEvent', { bg = 'none', fg = 'none', link = "Constant" })
vim.api.nvim_set_hl(0, 'SnacksPickerAuGroup', { bg = 'none', fg = 'none', link = "Type" })
vim.api.nvim_set_hl(0, 'SnacksPickerSearch', { bg = 'none', fg = 'none', link = "Search" })
vim.api.nvim_set_hl(0, 'SnacksPickerDiagnosticSource', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, 'SnacksPickerRegister', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'SnacksPickerKeymapMode', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'SnacksPickerKeymapLhs', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerKeymapNowait', { bg = 'none', fg = 'none', link = "@variable.builtin" })
vim.api.nvim_set_hl(0, 'SnacksPickerBufNr', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'SnacksPickerFile', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'SnacksPickerKeymapRhs', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerTime', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerUndoAdded', { bg = 'none', fg = 'none', link = "Added" })
vim.api.nvim_set_hl(0, 'SnacksPickerUndoRemoved', { bg = 'none', fg = 'none', link = "Removed" })
vim.api.nvim_set_hl(0, 'SnacksPickerUndoCurrent', { bg = 'none', fg = 'none', link = "@variable.builtin" })
vim.api.nvim_set_hl(0, 'SnacksPickerUndoSaved', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'LspInlayHint', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitBreaking', { bg = 'none', fg = 'none', link = "Error" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitDetached', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitBranch', { bg = 'none', fg = 'none', link = "Title" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitBranchCurrent', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitDate', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitIssue', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitType', { bg = 'none', fg = 'none', link = "Title" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitScope', { bg = 'none', fg = 'none', link = "Italic" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusAdded', { bg = 'none', fg = 'none', link = "Added" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusModified', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusDeleted', { bg = 'none', fg = 'none', link = "Removed" })
vim.api.nvim_set_hl(0, 'PmenuExtra', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusCopied', { bg = 'none', fg = 'none', link = "SnacksPickerGitStatus" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusUntracked', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusIgnored', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'PmenuKind', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusStaged', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'PmenuThumb', { bg = '#4F5258', fg = 'none' })
vim.api.nvim_set_hl(0, 'SnacksPickerManSection', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'PmenuSbar', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'SnacksPickerPickWinCurrent', { bg = 'none', fg = 'none', link = "CurSearch" })
vim.api.nvim_set_hl(0, 'SnacksPickerLabel', { bg = 'none', fg = 'none', link = "SnacksPickerSpecial" })
vim.api.nvim_set_hl(0, 'SnacksPickerLspDisabled', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'Pmenu', { bg = '#213554', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'SnacksPickerLspAttached', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'SnacksPickerLspAttachedBuf', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'PmenuSel', { bg = '#ABB2BF', fg = '#213554' })
vim.api.nvim_set_hl(0, 'SnacksPickerManPage', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'NormalFloat', { link = 'CursorColumn' })
vim.api.nvim_set_hl(0, 'SnacksPickerIconSource', { bg = 'none', fg = 'none', link = "@constant" })
vim.api.nvim_set_hl(0, 'SnacksPickerComment', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconName', { bg = 'none', fg = 'none', link = "@keyword" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconCategory', { bg = 'none', fg = 'none', link = "@module" })
vim.api.nvim_set_hl(0, 'SnacksPickerBufFlags', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconArray', { bg = 'none', fg = 'none', link = "@punctuation.bracket" })
vim.api.nvim_set_hl(0, 'LspSignatureActiveParameter', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconBoolean', { bg = 'none', fg = 'none', link = "@boolean" })
vim.api.nvim_set_hl(0, 'SnacksPickerTree', { bg = 'none', fg = 'none', link = "LineNr" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconClass', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, 'SnacksPickerDiagnosticCode', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconConstant', { bg = 'none', fg = 'none', link = "@constant" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconConstructor', { bg = 'none', fg = 'none', link = "@constructor" })
vim.api.nvim_set_hl(0, 'WarningMsg', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'Changed', { bg = 'none', fg = '#8CF8F7' })
vim.api.nvim_set_hl(0, 'Normal', { bg = '#121B2B', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'Bold', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'Debug', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'Directory', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'Error', { bg = '#F04C75', fg = '#121B2B' })
vim.api.nvim_set_hl(0, 'ErrorMsg', { bg = '#121B2B', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'Exception', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'FoldColumn', { bg = '#213554', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'Folded', { bg = '#213554', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'IncSearch', { bg = '#D19A66', fg = '#213554' })
vim.api.nvim_set_hl(0, 'Italic', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'Macro', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'MatchParen', { bg = '#80B2D6', fg = 'none' })
vim.api.nvim_set_hl(0, 'ModeMsg', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'MoreMsg', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'Question', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'Search', { bg = '#E5C07B', fg = '#213554' })
vim.api.nvim_set_hl(0, 'Substitute', { bg = '#E5C07B', fg = '#213554' })
vim.api.nvim_set_hl(0, 'SpecialKey', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'TooLong', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'Underlined', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'Visual', { bg = '#1D3872', fg = 'none' })
vim.api.nvim_set_hl(0, 'VisualNOS', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'WildMenu', { bg = '#E5C07B', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'Title', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'Conceal', { bg = '#121B2B', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'Cursor', { bg = '#ABB2BF', fg = '#121B2B' })
vim.api.nvim_set_hl(0, 'NonText', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'LineNr', { bg = '#213554', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'SignColumn', { bg = '#213554', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'StatusLineNC', { bg = '#213554', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'VertSplit', { bg = '#1D3872', fg = '#1D3872' })
vim.api.nvim_set_hl(0, 'ColorColumn', { bg = '#213554', fg = 'none' })
vim.api.nvim_set_hl(0, 'CursorColumn', { bg = '#213554', fg = 'none' })
vim.api.nvim_set_hl(0, 'CursorLine', { bg = '#213554', fg = 'none' })
vim.api.nvim_set_hl(0, 'CursorLineNr', { bg = '#213554', fg = '#3AA3E9' })
vim.api.nvim_set_hl(0, 'QuickFixLine', { bg = '#213554', fg = '#8CF8F7' })
vim.api.nvim_set_hl(0, 'TabLine', { bg = '#213554', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'TabLineFill', { bg = '#213554', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'TabLineSel', { bg = '#213554', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'Boolean', { bg = 'none', fg = '#D19A66' })
vim.api.nvim_set_hl(0, 'Character', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'Comment', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'Conditional', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'Constant', { bg = 'none', fg = '#D19A66' })
vim.api.nvim_set_hl(0, 'Define', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'Delimiter', { bg = 'none', fg = '#BE5046' })
vim.api.nvim_set_hl(0, 'Float', { bg = 'none', fg = '#D19A66' })
vim.api.nvim_set_hl(0, 'Function', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'Identifier', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'Include', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'Keyword', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'Label', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'Number', { bg = 'none', fg = '#D19A66' })
vim.api.nvim_set_hl(0, 'Operator', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'PreProc', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'Repeat', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'Special', { bg = 'none', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'SpecialChar', { bg = 'none', fg = '#BE5046' })
vim.api.nvim_set_hl(0, 'Statement', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'StorageClass', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'String', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'Structure', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'Tag', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'Todo', { bg = '#213554', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'Type', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'Typedef', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'cOperator', { bg = 'none', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'cPreCondit', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'csClass', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'csAttribute', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'csModifier', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'csType', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'csUnspecifiedStatement', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'csContextualStatement', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'csNewDecleration', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'cssBraces', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'cssClassName', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'cssColor', { bg = 'none', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'DiffAdd', { bg = '#213554', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'DiffChange', { bg = '#213554', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'DiffDelete', { bg = '#213554', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'DiffText', { bg = '#213554', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'DiffAdded', { bg = '#121B2B', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'DiffFile', { bg = '#121B2B', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'DiffNewFile', { bg = '#121B2B', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'DiffLine', { bg = '#121B2B', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'DiffRemoved', { bg = '#121B2B', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'gitcommitOverflow', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'gitcommitSummary', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'gitcommitComment', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'gitcommitUntracked', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'gitcommitDiscarded', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'gitcommitSelected', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'gitcommitHeader', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'gitcommitSelectedType', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'gitcommitUnmergedType', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'gitcommitDiscardedType', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'gitcommitBranch', { bg = 'none', fg = '#D19A66' })
vim.api.nvim_set_hl(0, 'gitcommitUntrackedFile', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'gitcommitUnmergedFile', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'gitcommitDiscardedFile', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'gitcommitSelectedFile', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'GitGutterAdd', { bg = '#213554', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'GitGutterChange', { bg = '#213554', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'GitGutterDelete', { bg = '#213554', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'GitGutterChangeDelete', { bg = '#213554', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'htmlBold', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'htmlItalic', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'htmlEndTag', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, '@keyword', { bg = 'none', fg = 'none', link = "Keyword" })
vim.api.nvim_set_hl(0, 'javaScript', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'javaScriptBraces', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'javaScriptNumber', { bg = 'none', fg = '#D19A66' })
vim.api.nvim_set_hl(0, 'jsOperator', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'DiagnosticError', { bg = 'none', fg = '#FFC0B9' })
vim.api.nvim_set_hl(0, 'jsReturn', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'jsThis', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'jsClassDefinition', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'jsFunction', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextInfo', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'jsFuncCall', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'jsClassFuncName', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'jsClassMethodType', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'jsRegexpString', { bg = 'none', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'jsGlobalObjects', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'jsGlobalNodeObjects', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'jsExceptions', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'jsBuiltins', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'mailQuoted1', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, '@constructor', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'mailQuoted3', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'mailQuoted4', { bg = 'none', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'mailQuoted5', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'mailQuoted6', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'mailURL', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'mailEmail', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'SnacksPickerToggleRegex', { bg = 'none', fg = 'none', link = "SnacksPickerToggle" })
vim.api.nvim_set_hl(0, '@variable.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'Added', { bg = 'none', fg = '#B3F6C0' })
vim.api.nvim_set_hl(0, 'DiagnosticWarn', { bg = 'none', fg = '#FCE094' })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatus', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'DiagnosticHint', { bg = 'none', fg = '#A6DBFF' })
vim.api.nvim_set_hl(0, 'CurSearch', { bg = '#FCE094', fg = '#07080D' })
vim.api.nvim_set_hl(0, 'DiagnosticInfo', { bg = 'none', fg = '#8CF8F7' })
vim.api.nvim_set_hl(0, '@constant', { bg = 'none', fg = 'none', link = "Constant" })
vim.api.nvim_set_hl(0, '@module', { bg = 'none', fg = 'none', link = "Structure" })
vim.api.nvim_set_hl(0, '@boolean', { bg = 'none', fg = 'none', link = "Boolean" })
vim.api.nvim_set_hl(0, '@type', { bg = 'none', fg = 'none', link = "Type" })
vim.api.nvim_set_hl(0, '@lsp.type.enum', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@lsp.type.enumMember', { bg = 'none', fg = 'none', link = "@constant" })
vim.api.nvim_set_hl(0, '@function', { bg = 'none', fg = 'none', link = "Function" })
vim.api.nvim_set_hl(0, '@lsp.type.interface', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@lsp.type.keyword', { bg = 'none', fg = 'none', link = "@keyword" })
vim.api.nvim_set_hl(0, '@constant.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@number', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'LspReferenceTarget', { bg = 'none', fg = 'none', link = "LspReferenceText" })
vim.api.nvim_set_hl(0, '@operator', { bg = 'none', fg = 'none', link = "Operator" })
vim.api.nvim_set_hl(0, '@property', { bg = 'none', fg = 'none', link = "Identifier" })
vim.api.nvim_set_hl(0, '@string', { bg = 'none', fg = 'none', link = "String" })
vim.api.nvim_set_hl(0, '@lsp.type.struct', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@lsp.type.typeParameter', { bg = 'none', fg = 'none', link = "@type.definition" })
vim.api.nvim_set_hl(0, '@variable', { bg = 'none', fg = '#E0E2EA' })
vim.api.nvim_set_hl(0, '@variable.parameter.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@module.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@label', { bg = 'none', fg = 'none', link = "Label" })
vim.api.nvim_set_hl(0, '@string.regexp', { bg = 'none', fg = 'none', link = "@string.special" })
vim.api.nvim_set_hl(0, '@string.special', { bg = 'none', fg = 'none', link = "SpecialChar" })
vim.api.nvim_set_hl(0, '@string.escape', { bg = 'none', fg = 'none', link = "@string.special" })
vim.api.nvim_set_hl(0, '@string.special.url', { bg = 'none', fg = 'none', link = "Underlined" })
vim.api.nvim_set_hl(0, '@character', { bg = 'none', fg = 'none', link = "Character" })
vim.api.nvim_set_hl(0, '@character.special', { bg = 'none', fg = 'none', link = "SpecialChar" })
vim.api.nvim_set_hl(0, '@number.float', { bg = 'none', fg = 'none', link = "Float" })
vim.api.nvim_set_hl(0, '@type.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@attribute', { bg = 'none', fg = 'none', link = "Macro" })
vim.api.nvim_set_hl(0, '@attribute.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@function.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@punctuation', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, '@punctuation.special', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@comment', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, '@comment.error', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, '@comment.warning', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, '@comment.note', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, '@comment.todo', { bg = 'none', fg = 'none', link = "Todo" })
vim.api.nvim_set_hl(0, '@markup', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@markup.strong', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@markup.italic', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@markup.strikethrough', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@markup.underline', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@markup.heading', { bg = 'none', fg = 'none', link = "Title" })
vim.api.nvim_set_hl(0, '@markup.link', { bg = 'none', fg = 'none', link = "Underlined" })
vim.api.nvim_set_hl(0, '@diff.plus', { bg = 'none', fg = 'none', link = "Added" })
vim.api.nvim_set_hl(0, '@diff.minus', { bg = 'none', fg = 'none', link = "Removed" })
vim.api.nvim_set_hl(0, '@diff.delta', { bg = 'none', fg = 'none', link = "Changed" })
vim.api.nvim_set_hl(0, '@tag', { bg = 'none', fg = 'none', link = "Tag" })
vim.api.nvim_set_hl(0, 'PmenuMatch', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'PmenuMatchSel', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'PmenuKindSel', { bg = 'none', fg = 'none', link = "PmenuSel" })
vim.api.nvim_set_hl(0, 'PmenuExtraSel', { bg = 'none', fg = 'none', link = "PmenuSel" })
vim.api.nvim_set_hl(0, 'Whitespace', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'NormalNC', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'MsgSeparator', { bg = 'none', fg = 'none', link = "StatusLine" })
vim.api.nvim_set_hl(0, 'MsgArea', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'FloatBorder', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'WinBar', { bg = '#07080D', fg = '#9B9EA4' })
vim.api.nvim_set_hl(0, '@lsp.type.macro', { bg = 'none', fg = 'none', link = "@constant.macro" })
vim.api.nvim_set_hl(0, 'WinBarNC', { bg = '#07080D', fg = '#9B9EA4' })
vim.api.nvim_set_hl(0, 'FloatTitle', { bg = 'none', fg = 'none', link = "Title" })
vim.api.nvim_set_hl(0, 'FloatFooter', { bg = 'none', fg = 'none', link = "FloatTitle" })
vim.api.nvim_set_hl(0, 'Winbar', { link = "StatusLine" })
vim.api.nvim_set_hl(0, 'StatusLineTerm', { bg = 'none', fg = 'none', link = "StatusLine" })
vim.api.nvim_set_hl(0, 'StatusLineTermNC', { bg = 'none', fg = 'none', link = "StatusLineNC" })
vim.api.nvim_set_hl(0, 'RedrawDebugNormal', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'lCursor', { bg = '#ABB2BF', fg = '#121B2B' })
vim.api.nvim_set_hl(0, 'NvimInvalidSingleQuotedUnknownEscape', { bg = 'none', fg = 'none', link = "NvimInternalError" })
vim.api.nvim_set_hl(0, 'NvimInvalid', { bg = 'none', fg = 'none', link = "Error" })
vim.api.nvim_set_hl(0, 'NvimInvalidPlainAssignment', { bg = 'none', fg = 'none', link = "NvimInvalidAssignment" })
vim.api.nvim_set_hl(0, 'NvimInvalidAugmentedAssignment', { bg = 'none', fg = 'none', link = "NvimInvalidAssignment" })
vim.api.nvim_set_hl(0, 'NvimInvalidAssignmentWithAddition',
    { bg = 'none', fg = 'none', link = "NvimInvalidAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimInvalidAssignmentWithSubtraction',
    { bg = 'none', fg = 'none', link = "NvimInvalidAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimInvalidAssignmentWithConcatenation',
    { bg = 'none', fg = 'none', link = "NvimInvalidAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimInvalidOperator', { bg = 'none', fg = 'none', link = "NvimInvalid" })
vim.api.nvim_set_hl(0, 'NvimInvalidUnaryOperator', { bg = 'none', fg = 'none', link = "NvimInvalidOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidUnaryPlus', { bg = 'none', fg = 'none', link = "NvimInvalidUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidUnaryMinus', { bg = 'none', fg = 'none', link = "NvimInvalidUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidNot', { bg = 'none', fg = 'none', link = "NvimInvalidUnaryOperator" })
vim.api.nvim_set_hl(0, '@lsp.type.namespace', { bg = 'none', fg = 'none', link = "@module" })
vim.api.nvim_set_hl(0, '@lsp.type.number', { bg = 'none', fg = 'none', link = "@number" })
vim.api.nvim_set_hl(0, '@lsp.type.operator', { bg = 'none', fg = 'none', link = "@operator" })
vim.api.nvim_set_hl(0, '@lsp.type.parameter', { bg = 'none', fg = 'none', link = "@variable.parameter" })
vim.api.nvim_set_hl(0, 'NvimInvalidBinaryMinus', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, '@lsp.type.property', { bg = 'none', fg = 'none', link = "@property" })
vim.api.nvim_set_hl(0, '@lsp.type.regexp', { bg = 'none', fg = 'none', link = "@string.regexp" })
vim.api.nvim_set_hl(0, '@lsp.type.string', { bg = 'none', fg = 'none', link = "@string" })
vim.api.nvim_set_hl(0, '@lsp.type.type', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, 'DiagnosticUnnecessary', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, '@lsp.type.variable', { bg = 'none', fg = 'none', link = "@variable" })
vim.api.nvim_set_hl(0, '@lsp.mod.deprecated', { bg = 'none', fg = 'none', link = "DiagnosticDeprecated" })
vim.api.nvim_set_hl(0, 'NvimInvalidTernary', { bg = 'none', fg = 'none', link = "NvimInvalidOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidTernaryColon', { bg = 'none', fg = 'none', link = "NvimInvalidTernary" })
vim.api.nvim_set_hl(0, 'NvimInvalidDelimiter', { bg = 'none', fg = 'none', link = "NvimInvalid" })
vim.api.nvim_set_hl(0, 'NvimInvalidParenthesis', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidLambda', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidNestingParenthesis', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidCallingParenthesis', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidSubscript', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidSubscriptBracket', { bg = 'none', fg = 'none', link = "NvimInvalidSubscript" })
vim.api.nvim_set_hl(0, 'NvimInvalidSubscriptColon', { bg = 'none', fg = 'none', link = "NvimInvalidSubscript" })
vim.api.nvim_set_hl(0, 'NvimInvalidCurly', { bg = 'none', fg = 'none', link = "NvimInvalidSubscript" })
vim.api.nvim_set_hl(0, 'NvimInvalidContainer', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidDict', { bg = 'none', fg = 'none', link = "NvimInvalidContainer" })
vim.api.nvim_set_hl(0, 'NvimInvalidList', { bg = 'none', fg = 'none', link = "NvimInvalidContainer" })
vim.api.nvim_set_hl(0, 'NvimInvalidValue', { bg = 'none', fg = 'none', link = "NvimInvalid" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifier', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifierScope', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifierScopeDelimiter',
    { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifierName', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifierKey', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidColon', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidComma', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidArrow', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidRegister', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidNumber', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'LspReferenceText', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'LspReferenceRead', { bg = 'none', fg = 'none', link = "LspReferenceText" })
vim.api.nvim_set_hl(0, 'LspReferenceWrite', { bg = 'none', fg = 'none', link = "LspReferenceText" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextHint', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextError', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextWarn', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesHint', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesError', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesWarn', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesInfo', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineHint', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineError', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineWarn', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineInfo', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingHint', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingError', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingWarn', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingInfo', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'DiagnosticSignHint', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'DiagnosticSignError', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'DiagnosticSignWarn', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'DiagnosticSignInfo', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'SnippetTabstop', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'BlinkCmpCursorLineMenuHack', { bg = '#ABB2BF', fg = 'none' })
vim.api.nvim_set_hl(0, 'SnacksIndent', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SnacksIndentScope', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksIndentChunk', { bg = 'none', fg = 'none', link = "SnacksIndentScope" })
vim.api.nvim_set_hl(0, 'BlinkCmpDocBorder', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'BlinkCmpDocSeparator', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'BlinkCmpDocCursorLine', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'BlinkCmpSignatureHelp', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'BlinkCmpSignatureHelpBorder', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'BlinkCmpSignatureHelpActiveParameter',
    { bg = 'none', fg = 'none', link = "LspSignatureActiveParameter" })
vim.api.nvim_set_hl(0, 'SnacksIndent7', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'SnacksIndent1', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'SnacksIndent4', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'SnacksIndent3', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'SnacksIndent2', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'SnacksIndent8', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'SnacksIndent6', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'SnacksIndent5', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'SnacksIndentBlank', { bg = 'none', fg = 'none', link = "SnacksIndent" })
vim.api.nvim_set_hl(0, 'BlinkCmpDoc', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'BlinkCmpMenuSelection', { bg = 'none', fg = 'none', link = "PmenuSel" })
vim.api.nvim_set_hl(0, 'BlinkCmpMenuBorder', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'BlinkCmpMenu', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'BlinkCmpGhostText', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'BlinkCmpScrollBarGutter', { bg = 'none', fg = 'none', link = "PmenuSbar" })
vim.api.nvim_set_hl(0, 'BlinkCmpScrollBarThumb', { bg = 'none', fg = 'none', link = "PmenuThumb" })
vim.api.nvim_set_hl(0, 'SnacksPickerLspUnavailable', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'SnacksPickerLspEnabled', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerSpecial', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'SnacksPickerPickWin', { bg = 'none', fg = 'none', link = "Search" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitCommit', { bg = 'none', fg = 'none', link = "@variable.builtin" })
vim.api.nvim_set_hl(0, 'SnacksPickerIconVariable', { bg = 'none', fg = 'none', link = "@variable" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindFolder', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindReference', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindFile', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindColor', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindSnippet', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindKeyword', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindEnum', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindValue', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindUnit', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindProperty', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindModule', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindInterface', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindClass', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindVariable', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindField', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindConstructor', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindFunction', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindMethod', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindText', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKind', { bg = 'none', fg = 'none', link = "PmenuKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpSource', { bg = 'none', fg = 'none', link = "PmenuExtra" })
vim.api.nvim_set_hl(0, 'BlinkCmpLabelDescription', { bg = 'none', fg = 'none', link = "PmenuExtra" })
vim.api.nvim_set_hl(0, 'BlinkCmpLabelDetail', { bg = 'none', fg = 'none', link = "PmenuExtra" })
vim.api.nvim_set_hl(0, 'BlinkCmpLabelDeprecated', { bg = 'none', fg = 'none', link = "PmenuExtra" })
vim.api.nvim_set_hl(0, 'SnacksPickerToggleIgnored', { bg = 'none', fg = 'none', link = "SnacksPickerToggle" })
vim.api.nvim_set_hl(0, 'SnacksPickerToggleFollow', { bg = 'none', fg = 'none', link = "SnacksPickerToggle" })
vim.api.nvim_set_hl(0, 'SnacksPickerToggleModified', { bg = 'none', fg = 'none', link = "SnacksPickerToggle" })
vim.api.nvim_set_hl(0, 'FloatShadow', { bg = '#4F5258', fg = 'none' })
vim.api.nvim_set_hl(0, 'FloatShadowThrough', { bg = '#4F5258', fg = 'none' })
vim.api.nvim_set_hl(0, 'RedrawDebugClear', { bg = '#6B5300', fg = 'none' })
vim.api.nvim_set_hl(0, 'SnacksPickerToggleHidden', { bg = 'none', fg = 'none', link = "SnacksPickerToggle" })
vim.api.nvim_set_hl(0, 'RedrawDebugComposed', { bg = '#005523', fg = 'none' })
vim.api.nvim_set_hl(0, 'SnacksPickerCol', { bg = 'none', fg = 'none', link = "LineNr" })
vim.api.nvim_set_hl(0, 'RedrawDebugRecompose', { bg = '#590008', fg = 'none' })
vim.api.nvim_set_hl(0, 'StatusLine', { bg = '#1D3872', fg = '#3AA3E9' })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineOk', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'NvimInternalError', { bg = '#FF0000', fg = '#FF0000' })
vim.api.nvim_set_hl(0, 'SnacksPickerIcon', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'NvimAssignment', { bg = 'none', fg = 'none', link = "Operator" })
vim.api.nvim_set_hl(0, 'NvimPlainAssignment', { bg = 'none', fg = 'none', link = "NvimAssignment" })
vim.api.nvim_set_hl(0, 'NvimAugmentedAssignment', { bg = 'none', fg = 'none', link = "NvimAssignment" })
vim.api.nvim_set_hl(0, 'NvimAssignmentWithAddition', { bg = 'none', fg = 'none', link = "NvimAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimAssignmentWithSubtraction', { bg = 'none', fg = 'none', link = "NvimAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimAssignmentWithConcatenation', { bg = 'none', fg = 'none', link = "NvimAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimOperator', { bg = 'none', fg = 'none', link = "Operator" })
vim.api.nvim_set_hl(0, 'NvimUnaryOperator', { bg = 'none', fg = 'none', link = "NvimOperator" })
vim.api.nvim_set_hl(0, 'NvimUnaryPlus', { bg = 'none', fg = 'none', link = "NvimUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimUnaryMinus', { bg = 'none', fg = 'none', link = "NvimUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimNot', { bg = 'none', fg = 'none', link = "NvimUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimBinaryOperator', { bg = 'none', fg = 'none', link = "NvimOperator" })
vim.api.nvim_set_hl(0, 'NvimComparison', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimComparisonModifier', { bg = 'none', fg = 'none', link = "NvimComparison" })
vim.api.nvim_set_hl(0, 'NvimBinaryPlus', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimBinaryMinus', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimConcat', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimConcatOrSubscript', { bg = 'none', fg = 'none', link = "NvimConcat" })
vim.api.nvim_set_hl(0, 'NvimOr', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimAnd', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimMultiplication', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimDivision', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimMod', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimTernary', { bg = 'none', fg = 'none', link = "NvimOperator" })
vim.api.nvim_set_hl(0, 'NvimTernaryColon', { bg = 'none', fg = 'none', link = "NvimTernary" })
vim.api.nvim_set_hl(0, 'NvimParenthesis', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'NvimLambda', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimNestingParenthesis', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimCallingParenthesis', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimSubscript', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimSubscriptBracket', { bg = 'none', fg = 'none', link = "NvimSubscript" })
vim.api.nvim_set_hl(0, 'NvimSubscriptColon', { bg = 'none', fg = 'none', link = "NvimSubscript" })
vim.api.nvim_set_hl(0, 'NvimCurly', { bg = 'none', fg = 'none', link = "NvimSubscript" })
vim.api.nvim_set_hl(0, 'NvimContainer', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimDict', { bg = 'none', fg = 'none', link = "NvimContainer" })
vim.api.nvim_set_hl(0, 'NvimList', { bg = 'none', fg = 'none', link = "NvimContainer" })
vim.api.nvim_set_hl(0, 'NvimIdentifier', { bg = 'none', fg = 'none', link = "Identifier" })
vim.api.nvim_set_hl(0, 'NvimIdentifierScope', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimIdentifierScopeDelimiter', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimIdentifierName', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimIdentifierKey', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimColon', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'NvimComma', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'NvimArrow', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'NvimRegister', { bg = 'none', fg = 'none', link = "SpecialChar" })
vim.api.nvim_set_hl(0, 'NvimNumber', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'NvimFloat', { bg = 'none', fg = 'none', link = "NvimNumber" })
vim.api.nvim_set_hl(0, 'NvimNumberPrefix', { bg = 'none', fg = 'none', link = "Type" })
vim.api.nvim_set_hl(0, 'NvimOptionSigil', { bg = 'none', fg = 'none', link = "Type" })
vim.api.nvim_set_hl(0, 'NvimOptionName', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimOptionScope', { bg = 'none', fg = 'none', link = "NvimIdentifierScope" })
vim.api.nvim_set_hl(0, 'NvimOptionScopeDelimiter', { bg = 'none', fg = 'none', link = "NvimIdentifierScopeDelimiter" })
vim.api.nvim_set_hl(0, 'NvimEnvironmentSigil', { bg = 'none', fg = 'none', link = "NvimOptionSigil" })
vim.api.nvim_set_hl(0, 'NvimEnvironmentName', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimString', { bg = 'none', fg = 'none', link = "String" })
vim.api.nvim_set_hl(0, 'NvimStringBody', { bg = 'none', fg = 'none', link = "NvimString" })
vim.api.nvim_set_hl(0, 'NvimStringQuote', { bg = 'none', fg = 'none', link = "NvimString" })
vim.api.nvim_set_hl(0, 'NvimStringSpecial', { bg = 'none', fg = 'none', link = "SpecialChar" })
vim.api.nvim_set_hl(0, 'NvimSingleQuote', { bg = 'none', fg = 'none', link = "NvimStringQuote" })
vim.api.nvim_set_hl(0, 'NvimSingleQuotedBody', { bg = 'none', fg = 'none', link = "NvimStringBody" })
vim.api.nvim_set_hl(0, 'NvimSingleQuotedQuote', { bg = 'none', fg = 'none', link = "NvimStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimDoubleQuote', { bg = 'none', fg = 'none', link = "NvimStringQuote" })
vim.api.nvim_set_hl(0, 'NvimDoubleQuotedBody', { bg = 'none', fg = 'none', link = "NvimStringBody" })
vim.api.nvim_set_hl(0, 'NvimDoubleQuotedEscape', { bg = 'none', fg = 'none', link = "NvimStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimFigureBrace', { bg = 'none', fg = 'none', link = "NvimInternalError" })
vim.api.nvim_set_hl(0, 'NvimSingleQuotedUnknownEscape', { bg = 'none', fg = 'none', link = "NvimInternalError" })
vim.api.nvim_set_hl(0, 'NvimSpacing', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindTypeParameter', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindOperator', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindEvent', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindStruct', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindEnumMember', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'markdownCode', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'markdownError', { bg = '#121B2B', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'markdownCodeBlock', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'markdownHeadingDelimiter', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'NERDTreeDirSlash', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'NERDTreeExecFile', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'phpMemberSelector', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'phpComparison', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'phpParent', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'phpMethodsVar', { bg = 'none', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'pythonOperator', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'pythonRepeat', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'pythonInclude', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'pythonStatement', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'rubyAttribute', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'rubyConstant', { bg = 'none', fg = '#E5C07B' })
vim.api.nvim_set_hl(0, 'rubyInterpolationDelimiter', { bg = 'none', fg = '#BE5046' })
vim.api.nvim_set_hl(0, 'NvimInvalidFloat', { bg = 'none', fg = 'none', link = "NvimInvalidNumber" })
vim.api.nvim_set_hl(0, 'NvimInvalidNumberPrefix', { bg = 'none', fg = 'none', link = "NvimInvalidNumber" })
vim.api.nvim_set_hl(0, 'NvimInvalidOptionSigil', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidOptionName', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidOptionScope', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifierScope" })
vim.api.nvim_set_hl(0, 'CursorIM', { bg = 'none', fg = 'none', link = "Cursor" })
vim.api.nvim_set_hl(0, 'ComplMatchIns', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'PreCondit', { bg = 'none', fg = 'none', link = "PreProc" })
vim.api.nvim_set_hl(0, 'SpecialComment', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'Ignore', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'LspCodeLens', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'SpellBad', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingOk', { bg = 'none', fg = 'none', link = "DiagnosticOk" })
vim.api.nvim_set_hl(0, 'SpellLocal', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'SpellCap', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'SpellRare', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiagnosticSignOk', { bg = 'none', fg = 'none', link = "DiagnosticOk" })
vim.api.nvim_set_hl(0, 'NvimInvalidEnvironmentName', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidEnvironmentSigil', { bg = 'none', fg = 'none', link = "NvimInvalidOptionSigil" })
vim.api.nvim_set_hl(0, 'NvimInvalidOptionScopeDelimiter',
    { bg = 'none', fg = 'none', link = "NvimInvalidIdentifierScopeDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidAssignment', { bg = 'none', fg = 'none', link = "NvimInvalid" })
vim.api.nvim_set_hl(0, 'StartifyPath', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'StartifySection', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'StartifySelect', { bg = 'none', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'StartifySlash', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'StartifySpecial', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'EndOfBuffer', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'TermCursor', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'LineNrAbove', { bg = 'none', fg = 'none', link = "LineNr" })
vim.api.nvim_set_hl(0, 'LineNrBelow', { bg = 'none', fg = 'none', link = "LineNr" })
vim.api.nvim_set_hl(0, 'CursorLineSign', { bg = 'none', fg = 'none', link = "SignColumn" })
vim.api.nvim_set_hl(0, 'CursorLineFold', { bg = 'none', fg = 'none', link = "FoldColumn" })
vim.api.nvim_set_hl(0, 'WinSeparator', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusUnmerged', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'SnacksPickerGitStatusRenamed', { bg = 'none', fg = 'none', link = "SnacksPickerGitStatus" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindConstant', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'SnacksPickerToggle', { bg = 'none', fg = 'none', link = "DiagnosticVirtualTextInfo" })
vim.api.nvim_set_hl(0, 'javaOperator', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'StartifyNumber', { bg = 'none', fg = '#D19A66' })
vim.api.nvim_set_hl(0, 'StartifyHeader', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'StartifyFooter', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'StartifyFile', { bg = 'none', fg = '#C8CCD4' })
vim.api.nvim_set_hl(0, 'StartifyBracket', { bg = 'none', fg = '#80B2D6' })
vim.api.nvim_set_hl(0, 'SignifySignDelete', { bg = '#213554', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'SignifySignChange', { bg = '#213554', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'SignifySignAdd', { bg = '#213554', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'sassMixinName', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'sassMixing', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'sassInclude', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'sassClassChar', { bg = 'none', fg = '#D19A66' })
vim.api.nvim_set_hl(0, 'sassidChar', { bg = 'none', fg = '#F04C75' })
vim.api.nvim_set_hl(0, 'rubyStringDelimiter', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'rubySymbol', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'rubyRegexp', { bg = 'none', fg = '#56B6C2' })
vim.api.nvim_set_hl(0, 'mailQuoted2', { bg = 'none', fg = '#98C379' })
vim.api.nvim_set_hl(0, 'jsFuncName', { bg = 'none', fg = '#01BFEF' })
vim.api.nvim_set_hl(0, 'jsStatement', { bg = 'none', fg = '#C678DD' })
vim.api.nvim_set_hl(0, 'htmlTag', { bg = 'none', fg = '#ABB2BF' })
vim.api.nvim_set_hl(0, 'NvimDoubleQuotedUnknownEscape', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidSpacing', { bg = 'none', fg = 'none', link = "ErrorMsg" })
vim.api.nvim_set_hl(0, 'NvimInvalidFigureBrace', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidDoubleQuotedUnknownEscape', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidDoubleQuotedEscape', { bg = 'none', fg = 'none', link = "NvimInvalidStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimInvalidDoubleQuotedBody', { bg = 'none', fg = 'none', link = "NvimInvalidStringBody" })
vim.api.nvim_set_hl(0, 'NvimInvalidDoubleQuote', { bg = 'none', fg = 'none', link = "NvimInvalidStringQuote" })
vim.api.nvim_set_hl(0, 'NvimInvalidSingleQuotedQuote', { bg = 'none', fg = 'none', link = "NvimInvalidStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimInvalidSingleQuotedBody', { bg = 'none', fg = 'none', link = "NvimInvalidStringBody" })
vim.api.nvim_set_hl(0, 'NvimInvalidSingleQuote', { bg = 'none', fg = 'none', link = "NvimInvalidStringQuote" })
vim.api.nvim_set_hl(0, 'NvimInvalidStringSpecial', { bg = 'none', fg = 'none', link = "NvimStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimInvalidStringQuote', { bg = 'none', fg = 'none', link = "NvimInvalidString" })
vim.api.nvim_set_hl(0, 'NvimInvalidStringBody', { bg = 'none', fg = 'none', link = "NvimStringBody" })
vim.api.nvim_set_hl(0, 'NvimInvalidString', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidMod', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidDivision', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidMultiplication', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidAnd', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidOr', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidConcatOrSubscript', { bg = 'none', fg = 'none', link = "NvimInvalidConcat" })
vim.api.nvim_set_hl(0, 'NvimInvalidConcat', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidBinaryPlus', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidComparisonModifier', { bg = 'none', fg = 'none', link = "NvimInvalidComparison" })
vim.api.nvim_set_hl(0, 'NvimInvalidComparison', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidBinaryOperator', { bg = 'none', fg = 'none', link = "NvimInvalidOperator" })
vim.api.nvim_set_hl(0, '@lsp.type.modifier', { bg = 'none', fg = 'none', link = "@type.qualifier" })
vim.api.nvim_set_hl(0, '@lsp.type.method', { bg = 'none', fg = 'none', link = "@function.method" })
vim.api.nvim_set_hl(0, '@lsp.type.function', { bg = 'none', fg = 'none', link = "@function" })
vim.api.nvim_set_hl(0, '@lsp.type.event', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@lsp.type.decorator', { bg = 'none', fg = 'none', link = "@attribute" })
vim.api.nvim_set_hl(0, '@lsp.type.comment', { bg = 'none', fg = 'none', link = "@comment" })
vim.api.nvim_set_hl(0, '@lsp.type.class', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@markup.heading.2.delimiter.vimdoc', { bg = '#121B2B', fg = '#121B2B' })
vim.api.nvim_set_hl(0, '@markup.heading.1.delimiter.vimdoc', { bg = '#121B2B', fg = '#121B2B' })
vim.api.nvim_set_hl(0, '@tag.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'Removed', { bg = 'none', fg = '#FFC0B9' })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesOk', { bg = 'none', fg = 'none', link = "DiagnosticOk" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextOk', { bg = 'none', fg = 'none', link = "DiagnosticOk" })
vim.api.nvim_set_hl(0, 'DiagnosticOk', { bg = 'none', fg = '#B3F6C0' })
vim.api.nvim_set_hl(0, 'LspCodeLensSeparator', { bg = 'none', fg = 'none', link = "LspCodeLens" })
